{"version":3,"sources":["components/NavBar.js","components/PredictHeartFailure.js","components/DismmisibleAlert.js","App.js","reportWebVitals.js","index.js"],"names":["NavBar","className","href","PredictHeartFailure","props","model","a","tf","console","log","loadModel","loadValues","value","male","female","yes","handleGender","event","setGender","no","handleAnaemia","setAnaemia","handleSmoking","setSmoking","handleBp","setBp","handleDiabetes","setDiabetes","htmlFor","type","name","id","onClick","defaultChecked","onChange","e","target","match","age","setAge","String","length","placeholder","readOnly","style","width","input_xs","Number","anaemia","diabetes","bp","gender","smoking","num","X","outputData","predict","dataSync","document","getElementById","Math","round","DismmisibleAlert","state","color","role","message","colors","red","yellow","green","App","useState","diabetesState","setDiabetesState","anaemiaState","setAnaemiaState","genderState","setGenderState","somkingState","setSomkingState","bpState","setBpState","ageState","setAgeState","alertState","setAlertState","alertMessage","setAlertMessage","alertColor","setAlertColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.32c1bde4.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function NavBar() {\n  return (\n    <div>\n      <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n        <div className=\"container-fluid\">\n          <a className=\"navbar-brand\" href=\"/\">Heart Failure Analytics</a>\n        </div>\n      </nav>\n    </div>\n  )\n}\n","import React from 'react'\nimport * as tf from '@tensorflow/tfjs';\nimport './PredictHeartFailure.css';\n\n\nexport default function PredictHeartFailure(props) {\n    var model;\n\n    // Load model\n    async function loadModel() {\n        model = await tf.loadLayersModel('https://raw.githubusercontent.com/TanmayDaga/Ai/main/models/model.json')\n        console.log(\"model loaded success\")\n    }\n    loadModel();\n\n\n\n    const loadValues = (value) => {\n        if (value === props.male) {\n            return 1;\n        }\n        if (value === props.female) {\n            return 0;\n        }\n        return 1 ? value === props.yes : 0;\n    }\n    function roundToX(num, X) {\n        return +(Math.round(num + \"e+\" + X) + \"e-\" + X);\n    }\n    function makePrediction() {\n\n        var input_xs;\n        input_xs = tf.tensor2d([\n            [Number(props.age),\n            loadValues(props.anaemia),\n            loadValues(props.diabetes),\n            loadValues(props.bp),\n            loadValues(props.gender),\n            loadValues(props.smoking)\n            ]\n        ])\n\n        var output = model.predict(input_xs)\n        var outputData = output.dataSync();\n        document.getElementById(\"answer\").value = \"You have \" + String(roundToX(Number(outputData) * 100, 2)) + \" % chances of heart failure\"\n\n\n    }\n\n    const handleGender = (event) => {\n        event === props.male ? props.setGender(props.yes) : props.setGender(props.no)\n    }\n\n    const handleAge = (event) => {\n        var regex = /^[0-9]+$/;\n        if (event.target.value === \"\" || (event.target.value.match(regex))) {\n            const initial = props.age;\n            props.setAge(event.target.value);\n            if (String(props.age).length >= 3 || String(props.age).length === 0) {\n\n            }\n\n\n        }\n\n    }\n    const handleAnaemia = (event) => {\n        event === props.yes ? props.setAnaemia(props.yes) : props.setAnaemia(props.no)\n    }\n    const handleSmoking = (event) => {\n        event === props.yes ? props.setSmoking(props.yes) : props.setSmoking(props.no)\n    }\n    const handleBp = (event) => {\n        event === props.yes ? props.setBp(props.yes) : props.setBp(props.no)\n    }\n    const handleDiabetes = (event) => {\n        event === props.yes ? props.setDiabetes(props.yes) : props.setDiabetes(props.no)\n    }\n\n    return (\n        <>\n            <div className=\"container-fluid\">\n                {/* Gender */}\n\n                <div>\n                    <div className=\"form-check-inline\">\n                        <label className=\"form-check-lable\">\n                            Gender:\n                        </label>\n                    </div>\n\n                    <div className=\"form-check-inline\">\n                        <label htmlFor=\"maleGenderRadioButton\">Male</label>\n                        <input type=\"radio\" name=\"genderRadioButton\" id=\"maleGenderRadioButton\" onClick={() => handleGender(props.male)} />\n                    </div>\n                    <div className=\"form-check-inline\">\n                        <label htmlFor=\"femaleGenderRadioButton\">Female</label>\n                        <input type=\"radio\" name=\"genderRadioButton\" id=\"femaleGenderRadioButton\" defaultChecked={true} onClick={() => handleGender(props.female)} />\n                    </div>\n                </div>\n\n                {/* Age */}\n                <div className=\"form-group\">\n                    <table>\n                        <tbody>\n                            <tr>\n                                <td>\n                                    <label className=\"col-form-label\" htmlFor=\"inputAge\">Age</label>\n                                </td>\n                                <td>\n                                    <input type=\"text\" className=\"container-fluid ageTextEdit\" id=\"inputAge\" onChange={(e) => { handleAge(e) }} value={props.age} placeholder=\"Enter Age\" />\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n\n                {/* Anameia */}\n                <div>\n                    <div className=\"form-check-inline\">\n                        <label className=\"form-check-lable\">\n                            Anaemia\n                        </label>\n                    </div>\n                    <div className=\"form-check form-check-inline\">\n                        <label htmlFor=\"yesAnaemiaRadioButton\" className=\"form-check-inline\">Yes</label>\n                        <input type=\"radio\" name=\"anameiaRadioButton\" id=\"yesAnaemiaRadioButton\" onClick={() => handleAnaemia(props.yes)}></input>\n                    </div>\n                    <div className=\"form-check form-check-inline\">\n                        <label htmlFor=\"noAnaemiaRadioButton\" className=\"form-check-inline\">No</label>\n                        <input type=\"radio\" name=\"anameiaRadioButton\" defaultChecked={true} id=\"noAnaemiaRadioButton\" onClick={() => handleAnaemia(props.no)}></input>\n                    </div>\n                </div>\n\n                {/* Smoking */}\n                <div>\n                    <div className=\"form-check-inline\">\n                        <label className=\"form-check-label\">\n                            Smoking\n                        </label>\n                    </div>\n                    <div className=\"form-check form-check-inline\">\n                        <label htmlFor=\"yesSmokingRadioButton\" className=\"form-check-inline\">Yes</label>\n                        <input type=\"radio\" name=\"smokingRadioButton\" id=\"yesSmokingRadioButton\" onClick={() => handleSmoking(props.yes)}></input>\n                    </div>\n                    <div className=\"form-check form-check-inline\">\n                        <label htmlFor=\"noSmokingRadioButton\" className=\"form-check-inline\">No</label>\n                        <input type=\"radio\" name=\"smokingRadioButton\" id=\"noSmokingRadioButton\" defaultChecked={true} onClick={() => handleSmoking(props.no)}></input>\n                    </div>\n                </div>\n                {/* High Blooad Pressur */}\n                <div>\n                    <div className=\"form-check-inline\">\n                        <label className=\"form-check-label\">\n                            High Blood Pressure?\n                        </label>\n                    </div>\n                    <div className=\"form-check form-check-inline\">\n                        <label htmlFor=\"yesBpRadioButton\" className=\"form-check-inline\">Yes</label>\n                        <input type=\"radio\" name=\"BpRadioButton\" id=\"yesBpRadioButton\" onClick={() => handleBp(props.yes)}></input>\n                    </div>\n                    <div className=\"form-check form-check-inline\">\n                        <label htmlFor=\"noBpRadioButton\" className=\"form-check-inline\">No</label>\n                        <input type=\"radio\" name=\"BpRadioButton\" id=\"noBpRadioButton\" defaultChecked={true} onClick={() => handleBp(props.no)}></input>\n                    </div>\n                </div>\n\n                {/* Diabetes */}\n                <div>\n                    <div className=\"form-check-inline\">\n                        <label className=\"form-check-label\">\n                            Diabetes\n                        </label>\n                    </div>\n                    <div className=\"form-check form-check-inline\">\n                        <label htmlFor=\"yesDiabetesRadioButton\" className=\"form-check-inline\">Yes</label>\n                        <input type=\"radio\" name=\"DiabetesRadioButton\" id=\"yesDiabetesRadioButton\" onClick={() => handleDiabetes(props.yes)}></input>\n                    </div>\n                    <div className=\"form-check form-check-inline\">\n                        <label htmlFor=\"noDiabetesRadioButton\" className=\"form-check-inline\">No</label>\n                        <input type=\"radio\" name=\"DiabetesRadioButton\" id=\"noDiabetesRadioButton\" defaultChecked={true} onClick={() => handleDiabetes(props.yes)}></input>\n                    </div>\n                </div>\n\n                <div>\n                    <input type=\"text\" id=\"answer\" readOnly className=\"form-control-plaintext\" style={{ width: \"50%\" }} />\n                    <input type=\"button\" className=\"clickButton my-1 btn btn-primary pull-right\" onClick={makePrediction} value=\"Get Results\" />\n\n                </div>\n            </div>\n        </>\n    )\n}\n","import React from 'react'\n\nexport default function DismmisibleAlert(props) {\n    return (\n        <>\n            {props.state === true ?\n                (<div className= {`alert alert-${props.color} alert-dismissible fade show`} role=\"alert\">\n                    {props.message}\n                </div> ): \"\"}\n\n        </>\n    )\n}\n","\nimport './App.css';\nimport NavBar from \"./components/NavBar.js\";\nimport PredictHeartFailure from './components/PredictHeartFailure';\nimport { useState } from \"react\";\nimport DismmisibleAlert from './components/DismmisibleAlert';\n\nlet no = \"NO\";\nlet yes = \"YES\";\nlet genderMale = \"MALE\"\nlet genderFemale = \"FEMALE\"\nlet colors = {\n  red:\"danger\",\n  yellow:\"alert\",\n  green:\"success\",\n}\n\n\nfunction App() {\n  const [diabetesState, setDiabetesState] = useState(no);\n  const [anaemiaState, setAnaemiaState] = useState(no);\n  const [genderState, setGenderState] = useState(null);\n  const [somkingState, setSomkingState] = useState(no);\n  const [bpState, setBpState] = useState(no);\n  const [ageState, setAgeState] = useState(45);\n  const [alertState, setAlertState] = useState(false);\n  const [alertMessage,setAlertMessage] = useState(\"Invalid age\");\n  const [alertColor,setAlertColor] = useState(colors.green);\n\n  return (\n      <>\n      <DismmisibleAlert state = {alertState} message = {alertMessage} color = {alertColor}/>\n      <NavBar/>\n      <PredictHeartFailure yes = {yes} no = {no} colors = {colors}\n                           male = {genderMale} female = {genderFemale}\n                           diabetes = {diabetesState} setDiabetes = {setDiabetesState}\n                           anaemia = {anaemiaState} setAnaemia = {setAnaemiaState} \n                           gender = {genderState} setGender = {setGenderState} \n                           smoking = {somkingState} setSmoking = {setSomkingState}\n                           bp = {bpState} setBp = {setBpState}\n                           age = {ageState} setAge = {setAgeState}\n                           alertState = {alertState} alertMessage = {alertMessage}\n                           setAlertState = {setAlertState} setAlertMessage = {setAlertMessage} setAlertColor = {setAlertColor}\n                           />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}