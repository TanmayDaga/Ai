{"version":3,"sources":["components/NavBar.js","components/PredictHeartFailure.js","components/DismmisibleAlert.js","components/Links.js","components/Footer.js","Graphs/ModelGenerated/AllDiseaseVsNoDisease.png","Graphs/ModelGenerated/EachFeatureEffect.png","components/Graphs.js","App.js","reportWebVitals.js","index.js"],"names":["NavBar","props","className","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","onClick","setAnalyticsState","setGraphsState","href","PredictHeartFailure","model","a","tf","console","log","loadModel","loadValues","value","male","female","yes","handleGender","event","setGender","no","handleAnaemia","setAnaemia","handleSmoking","setSmoking","handleBp","setBp","handleDiabetes","setDiabetes","analyticsState","htmlFor","name","defaultChecked","onChange","e","target","match","setAge","age","placeholder","readOnly","style","width","wordBreak","wordWrap","setAlertMessage","setAlertColor","setAlertState","setTimeout","input_xs","Number","anaemia","diabetes","bp","gender","smoking","outputData","predict","dataSync","document","getElementById","String","num","X","Math","round","textDecoration","DismmisibleAlert","state","class","color","role","message","data-bs-dismiss","Links","externalLinks","require","Prevent","Deal","Stop","Consequences","what","symptoms","preventions","bloodPressure","symptomsAndCauses","Footer","Graphs","graphsState","src","EachFeatureEffect","alt","AllDiseaseVsNoDisease","colors","red","yellow","green","App","useState","diabetesState","setDiabetesState","anaemiaState","setAnaemiaState","genderState","setGenderState","somkingState","setSomkingState","bpState","setBpState","ageState","setAgeState","alertState","alertMessage","alertColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.65270f5e.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function NavBar(props) {\n\n  const onClickAnalytics = () => {\n    props.setAnalyticsState(true);\n    props.setGraphsState(false);\n  }\n  const onClickGraphs = () => {\n    props.setGraphsState(true);\n    props.setAnalyticsState(false);\n  }\n  return (\n    <>\n      <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n        <p className=\"navbar-brand\">Heart Failure Analytics</p>\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n          <ul className=\"navbar-nav mr-auto\">\n            <li className=\"nav-item active\">\n              <p className=\"nav-link\" onClick={onClickAnalytics}>Analytics </p>\n            </li>\n            <li className=\"nav-item active\">\n              <p className=\"nav-link\" onClick={onClickGraphs}>Graphs </p>\n            </li>\n            <li className=\"nav-item\">\n              <a className=\"nav-link link-success\" href=\"https://github.com/TanmayDaga/Ai\">Get Code </a>\n            </li>\n\n\n          </ul>\n\n        </div>\n      </nav>\n    </>\n\n  )\n}\n","import React from 'react'\nimport * as tf from '@tensorflow/tfjs';\nimport './Csss/PredictHeartFailure.css';\n\n\nexport default function PredictHeartFailure(props) {\n    var model;\n\n    // Load model\n    async function loadModel() {\n        model = await tf.loadLayersModel('https://raw.githubusercontent.com/TanmayDaga/Ai/main/models/model.json')\n        console.log(\"model loaded success\")\n        console.log(model);\n    }\n    loadModel();\n\n\n\n    const loadValues = (value) => {\n        if (value === props.male) {\n            return 1;\n        }\n        if (value === props.female) {\n            return 0;\n        }\n        return 1 ? value === props.yes : 0;\n    }\n    function roundToX(num, X) {\n        return +(Math.round(num + \"e+\" + X) + \"e-\" + X);\n    }\n    function makePrediction() {\n        if (props.age >= 100 || props.age <= 0 || props.age === \"\") {\n            props.setAlertMessage(\"Invalid Age. Age should be between 0 to 100\");\n            props.setAlertColor(\"danger\")\n            props.setAlertState(true);\n            props.setAge(\"\")\n            setTimeout(() => {\n                props.setAlertState(false);\n            }, 3000);\n        }\n        else {\n            var input_xs;\n            input_xs = tf.tensor2d([\n                [Number(props.age),\n                loadValues(props.anaemia),\n                loadValues(props.diabetes),\n                loadValues(props.bp),\n                loadValues(props.gender),\n                loadValues(props.smoking)\n                ]\n            ])\n\n\n            var output = model.predict(input_xs)\n            var outputData = output.dataSync();\n            document.getElementById(\"answer\").value = \"You have \" + String(roundToX(Number(outputData) * 100, 2)) + \" % chances of heart failure\"\n\n        }\n    }\n\n    const handleGender = (event) => {\n        event === props.male ? props.setGender(props.yes) : props.setGender(props.no)\n    }\n\n    const handleAge = (event) => {\n        var regex = /^[0-9]+$/;\n        if (event.target.value === \"\" || (event.target.value.match(regex))) {\n            props.setAge(event.target.value);\n        }\n\n    }\n    const handleAnaemia = (event) => {\n        event === props.yes ? props.setAnaemia(props.yes) : props.setAnaemia(props.no)\n    }\n    const handleSmoking = (event) => {\n        event === props.yes ? props.setSmoking(props.yes) : props.setSmoking(props.no)\n    }\n    const handleBp = (event) => {\n        event === props.yes ? props.setBp(props.yes) : props.setBp(props.no)\n    }\n    const handleDiabetes = (event) => {\n        event === props.yes ? props.setDiabetes(props.yes) : props.setDiabetes(props.no)\n    }\n\n    return (\n        <>{props.analyticsState ?\n            (<div className=\"container-fluid py-3 containerMain\">\n                <h3>Analytics</h3>\n\n                {/* Gender */}\n\n\n                <div>\n                    <div className=\"form-check-inline\">\n                        <label className=\"form-check-lable\">\n                            Gender:\n                        </label>\n                    </div>\n\n                    <div className=\"form-check-inline\">\n                        <label htmlFor=\"maleGenderRadioButton\">Male</label>\n                        <input type=\"radio\" name=\"genderRadioButton\" id=\"maleGenderRadioButton\" onClick={() => handleGender(props.male)} />\n                    </div>\n                    <div className=\"form-check-inline\">\n                        <label htmlFor=\"femaleGenderRadioButton\">Female</label>\n                        <input type=\"radio\" name=\"genderRadioButton\" id=\"femaleGenderRadioButton\" defaultChecked={true} onClick={() => handleGender(props.female)} />\n                    </div>\n                </div>\n\n                {/* Age */}\n                <div className=\"form-group\">\n                    <table>\n                        <tbody>\n                            <tr>\n                                <td>\n                                    <label className=\"col-form-label\" htmlFor=\"inputAge\">Age</label>\n                                </td>\n                                <td>\n                                    <input type=\"text\" className=\"container-fluid ageTextEdit\" id=\"inputAge\" onChange={(e) => { handleAge(e) }} value={props.age} placeholder=\"Enter Age\" />\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n\n                {/* Anameia */}\n                <div>\n                    <div className=\"form-check-inline\">\n                        <label className=\"form-check-lable\">\n                            Anaemia\n                        </label>\n                    </div>\n                    <div className=\"form-check form-check-inline\">\n                        <label htmlFor=\"yesAnaemiaRadioButton\" className=\"form-check-inline\">Yes</label>\n                        <input type=\"radio\" name=\"anameiaRadioButton\" id=\"yesAnaemiaRadioButton\" onClick={() => handleAnaemia(props.yes)}></input>\n                    </div>\n                    <div className=\"form-check form-check-inline\">\n                        <label htmlFor=\"noAnaemiaRadioButton\" className=\"form-check-inline\">No</label>\n                        <input type=\"radio\" name=\"anameiaRadioButton\" defaultChecked={true} id=\"noAnaemiaRadioButton\" onClick={() => handleAnaemia(props.no)}></input>\n                    </div>\n                </div>\n\n                {/* Smoking */}\n                <div>\n                    <div className=\"form-check-inline\">\n                        <label className=\"form-check-label\">\n                            Smoking\n                        </label>\n                    </div>\n                    <div className=\"form-check form-check-inline\">\n                        <label htmlFor=\"yesSmokingRadioButton\" className=\"form-check-inline\">Yes</label>\n                        <input type=\"radio\" name=\"smokingRadioButton\" id=\"yesSmokingRadioButton\" onClick={() => handleSmoking(props.yes)}></input>\n                    </div>\n                    <div className=\"form-check form-check-inline\">\n                        <label htmlFor=\"noSmokingRadioButton\" className=\"form-check-inline\">No</label>\n                        <input type=\"radio\" name=\"smokingRadioButton\" id=\"noSmokingRadioButton\" defaultChecked={true} onClick={() => handleSmoking(props.no)}></input>\n                    </div>\n                </div>\n                {/* High Blooad Pressur */}\n                <div>\n                    <div className=\"form-check-inline\">\n                        <label className=\"form-check-label\">\n                            High Blood Pressure?\n                        </label>\n                    </div>\n                    <div className=\"form-check form-check-inline\">\n                        <label htmlFor=\"yesBpRadioButton\" className=\"form-check-inline\">Yes</label>\n                        <input type=\"radio\" name=\"BpRadioButton\" id=\"yesBpRadioButton\" onClick={() => handleBp(props.yes)}></input>\n                    </div>\n                    <div className=\"form-check form-check-inline\">\n                        <label htmlFor=\"noBpRadioButton\" className=\"form-check-inline\">No</label>\n                        <input type=\"radio\" name=\"BpRadioButton\" id=\"noBpRadioButton\" defaultChecked={true} onClick={() => handleBp(props.no)}></input>\n                    </div>\n                </div>\n\n                {/* Diabetes */}\n                <div>\n                    <div className=\"form-check-inline\">\n                        <label className=\"form-check-label\">\n                            Diabetes\n                        </label>\n                    </div>\n                    <div className=\"form-check form-check-inline\">\n                        <label htmlFor=\"yesDiabetesRadioButton\" className=\"form-check-inline\">Yes</label>\n                        <input type=\"radio\" name=\"DiabetesRadioButton\" id=\"yesDiabetesRadioButton\" onClick={() => handleDiabetes(props.yes)}></input>\n                    </div>\n                    <div className=\"form-check form-check-inline\">\n                        <label htmlFor=\"noDiabetesRadioButton\" className=\"form-check-inline\">No</label>\n                        <input type=\"radio\" name=\"DiabetesRadioButton\" id=\"noDiabetesRadioButton\" defaultChecked={true} onClick={() => handleDiabetes(props.yes)}></input>\n                    </div>\n                </div>\n\n                <div>\n                    <input type=\"text\" id=\"answer\" readOnly className=\"form-control-plaintext text-sm\" style={{ width: \"100%\", wordBreak: 'break-word', wordWrap: 'break-word' }} />\n                    <div className=\"clickButton my-1 btn btn-primary pull-right\" onClick={makePrediction} >Get Results</div>\n\n                </div>\n                <div className=\"font-weight-bold text-sm\">\n                    Disclaimer: The model purely based on this\n                    <a className=\"link-secondary\" style={{ textDecoration: \"none\" }} href=\"https://www.kaggle.com/andrewmvd/heart-failure-clinical-data\"> data</a>\n                </div>\n            </div>) : \"\"\n        }\n        </>\n    )\n}\n","import React from 'react'\n\nexport default function DismmisibleAlert(props) {\n    return (\n        <>\n            {props.state === true ?\n\n                (<div>\n                    <div class={`alert alert-${props.color} alert-dismissible fade show`} role=\"alert\">\n                    <strong>{props.message}</strong>\n                    <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\n                </div>\n                    \n                </div>\n                ) : \"\"}\n\n        </>\n    )\n}\n","import React from 'react'\nimport './Csss/Links.css'\n\n\n\nexport default function Links() {\n    let externalLinks = require(\"../externalLinks.json\");\n    return (\n        <div className=\"containerMainLinks container-fluid\" >\n            <h3>Reference Links</h3>\n            <details >\n                <summary>\n                    Diabetes\n                </summary>\n                <a className=\"link-success\"href={externalLinks.diabetes.Prevent}>How to prevent Diabetes</a><br />\n                <a className=\"link-success\" href={externalLinks.diabetes.Deal}>How to deal with Diabetes</a>\n            </details>\n            <details>\n                <summary>\n                    Smoking\n                </summary>\n                <a className=\"link-success\"href={externalLinks.smoking.Stop}>How to stop smoking</a><br />\n                <a className=\"link-success\"href={externalLinks.smoking.Consequences}>Consequences of smoking</a>\n            </details>\n            <details>\n                <summary>\n                    Anaemia\n\n                </summary>\n                <a className=\"link-success\"href={externalLinks.anaemia.what}>What is anaemia</a><br />\n                <a className=\"link-success\"href={externalLinks.anaemia.symptoms}>Symptoms of anaemia</a><br />\n                <a className=\"link-success\"href={externalLinks.anaemia.preventions}>How to prevent anaemia</a>\n\n            </details>\n            <details>\n                <summary>\n                    Blood Pressure\n                </summary>\n                <a className=\"link-success\"href={externalLinks.bloodPressure.symptomsAndCauses}>Symptoms of High Blood Pressure</a><br />\n                <a className=\"link-success\"href={externalLinks.bloodPressure.preventions}>Prevent high blood pressure</a>\n            </details>\n\n\n        </div>\n    )\n}\n","import React from 'react'\nimport './Csss/Footer.css'\n\nexport default function Footer() {\n    return (\n        <div>\n            <div class=\"bg-dark text-light text-center p-4 containerMainFooter\">\n                © 2021 Copyright:\n                <a class=\"text-reset fw-bold\" href=\"https://tanmaydaga.github.io/Ai/\">Heart Failure Analytics</a>\n                <div>\n            \n            </div>\n            </div>\n            \n        </div>\n    )\n}\n","export default __webpack_public_path__ + \"static/media/AllDiseaseVsNoDisease.10ebf6b7.png\";","export default __webpack_public_path__ + \"static/media/EachFeatureEffect.0f27cd55.png\";","import React from 'react'\nimport AllDiseaseVsNoDisease from '../Graphs/ModelGenerated/AllDiseaseVsNoDisease.png'\nimport EachFeatureEffect from '../Graphs/ModelGenerated/EachFeatureEffect.png'\n\nexport default function Graphs(props) {\n    return (\n\n        <>\n            {props.graphsState === true ?\n\n                (<div>\n                    <div class=\"row\">\n                        <div class=\"col-md-4\">\n                            <div class=\"thumbnail\">\n                                <img src={EachFeatureEffect} alt=\"Lights\" style={{ width: \"100%\" }} />\n                            </div>\n                        </div>\n                        <div class=\"col-md-4\">\n                            <div class=\"thumbnail\">\n                                <img src={AllDiseaseVsNoDisease} alt=\"Nature\" style={{ width: \"100%\" }} />\n                            </div>\n                        </div>\n                    </div>\n\n                    <div>\n                        <p><strong>The graphs are based on data generated by model</strong></p>\n                    </div>\n                </div>)\n\n                : \"\"}\n        </>\n\n    )\n}\n","\nimport './App.css';\nimport NavBar from \"./components/NavBar.js\";\nimport PredictHeartFailure from './components/PredictHeartFailure';\nimport { useState } from \"react\";\nimport DismmisibleAlert from './components/DismmisibleAlert';\nimport Links from './components/Links';\nimport Footer from './components/Footer';\nimport Graphs from './components/Graphs'\n\nlet no = \"NO\";\nlet yes = \"YES\";\nlet genderMale = \"MALE\"\nlet genderFemale = \"FEMALE\"\nlet colors = {\n  red:\"danger\",\n  yellow:\"alert\",\n  green:\"success\",\n}\n\n\nfunction App() {\n  const [diabetesState, setDiabetesState] = useState(no);\n  const [anaemiaState, setAnaemiaState] = useState(no);\n  const [genderState, setGenderState] = useState(null);\n  const [somkingState, setSomkingState] = useState(no);\n  const [bpState, setBpState] = useState(no);\n  const [ageState, setAgeState] = useState(45);\n  const [alertState, setAlertState] = useState(false);\n  const [alertMessage,setAlertMessage] = useState(\"Invalid age\");\n  const [alertColor,setAlertColor] = useState(colors.green);\n  const [analyticsState, setAnalyticsState] = useState(true);\n  const [graphsState, setGraphsState] = useState(false)\n\n  return (\n      <>\n      \n      <NavBar setAnalyticsState = {setAnalyticsState} setGraphsState = {setGraphsState}/>\n      <DismmisibleAlert state = {alertState} message = {alertMessage} color = {alertColor}/>\n   \n      <PredictHeartFailure yes = {yes} no = {no} colors = {colors} analyticsState = {analyticsState}\n                           male = {genderMale} female = {genderFemale}\n                           diabetes = {diabetesState} setDiabetes = {setDiabetesState}\n                           anaemia = {anaemiaState} setAnaemia = {setAnaemiaState} \n                           gender = {genderState} setGender = {setGenderState} \n                           smoking = {somkingState} setSmoking = {setSomkingState}\n                           bp = {bpState} setBp = {setBpState}\n                           age = {ageState} setAge = {setAgeState}\n                           alertState = {alertState} alertMessage = {alertMessage}\n                           setAlertState = {setAlertState} setAlertMessage = {setAlertMessage} setAlertColor = {setAlertColor}\n                           />\n      <Graphs graphsState = {graphsState}/>                           \n      <Links/>\n      <footer>\n        <Footer/>\n      </footer>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}