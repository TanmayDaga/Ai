{"version":3,"sources":["components/NavBar.js","components/PredictHeartFailure.js","components/DismmisibleAlert.js","components/Links.js","components/Footer.js","App.js","reportWebVitals.js","index.js"],"names":["NavBar","className","PredictHeartFailure","props","model","a","tf","console","log","loadModel","loadValues","value","male","female","yes","handleGender","event","setGender","no","handleAnaemia","setAnaemia","handleSmoking","setSmoking","handleBp","setBp","handleDiabetes","setDiabetes","htmlFor","type","name","id","onClick","defaultChecked","onChange","e","target","match","setAge","age","placeholder","readOnly","style","width","wordBreak","wordWrap","setAlertMessage","setAlertColor","setAlertState","setTimeout","input_xs","Number","anaemia","diabetes","bp","gender","smoking","outputData","predict","dataSync","document","getElementById","String","num","X","Math","round","textDecoration","href","DismmisibleAlert","state","class","color","role","message","data-bs-dismiss","aria-label","Links","externalLinks","require","Prevent","Deal","Stop","Consequences","what","symptoms","preventions","bloodPressure","symptomsAndCauses","Footer","colors","red","yellow","green","App","useState","diabetesState","setDiabetesState","anaemiaState","setAnaemiaState","genderState","setGenderState","somkingState","setSomkingState","bpState","setBpState","ageState","setAgeState","alertState","alertMessage","alertColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.03633430.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function NavBar() {\n  return (\n    <>\n      <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n        <strong className=\"navbar-brand\">Heart Failure Analytics</strong>\n      </nav>\n\n    </>\n\n  )\n}\n","import React from 'react'\nimport * as tf from '@tensorflow/tfjs';\nimport './Csss/PredictHeartFailure.css';\n\n\nexport default function PredictHeartFailure(props) {\n    var model;\n\n    // Load model\n    async function loadModel() {\n        model = await tf.loadLayersModel('https://raw.githubusercontent.com/TanmayDaga/Ai/main/models/model.json')\n        console.log(\"model loaded success\")\n        console.log(model);\n    }\n    loadModel();\n\n\n\n    const loadValues = (value) => {\n        if (value === props.male) {\n            return 1;\n        }\n        if (value === props.female) {\n            return 0;\n        }\n        return 1 ? value === props.yes : 0;\n    }\n    function roundToX(num, X) {\n        return +(Math.round(num + \"e+\" + X) + \"e-\" + X);\n    }\n    function makePrediction() {\n        if (props.age >= 100 || props.age <= 0 || props.age===\"\") {\n            props.setAlertMessage(\"Invalid Age. Age should be between 0 to 100\");\n            props.setAlertColor(\"danger\")\n            props.setAlertState(true);\n            props.setAge(\"\")\n            setTimeout(() => {\n                props.setAlertState(false);\n            }, 3000);\n        }\n        else {\n            var input_xs;\n            input_xs = tf.tensor2d([\n                [Number(props.age),\n                loadValues(props.anaemia),\n                loadValues(props.diabetes),\n                loadValues(props.bp),\n                loadValues(props.gender),\n                loadValues(props.smoking)\n                ]\n            ])\n        \n\n        var output = model.predict(input_xs)\n        var outputData = output.dataSync();\n        document.getElementById(\"answer\").value = \"You have \" + String(roundToX(Number(outputData) * 100, 2)) + \" % chances of heart failure\"\n\n        }\n    }\n\n    const handleGender = (event) => {\n        event === props.male ? props.setGender(props.yes) : props.setGender(props.no)\n    }\n\n    const handleAge = (event) => {\n        var regex = /^[0-9]+$/;\n        if (event.target.value === \"\" || (event.target.value.match(regex))) {\n            props.setAge(event.target.value);\n        }\n\n    }\n    const handleAnaemia = (event) => {\n        event === props.yes ? props.setAnaemia(props.yes) : props.setAnaemia(props.no)\n    }\n    const handleSmoking = (event) => {\n        event === props.yes ? props.setSmoking(props.yes) : props.setSmoking(props.no)\n    }\n    const handleBp = (event) => {\n        event === props.yes ? props.setBp(props.yes) : props.setBp(props.no)\n    }\n    const handleDiabetes = (event) => {\n        event === props.yes ? props.setDiabetes(props.yes) : props.setDiabetes(props.no)\n    }\n\n    return (\n        <>\n            <div className=\"container-fluid py-3 containerMain\">\n                <h3>Analytics</h3>\n\n                {/* Gender */}\n\n\n                <div>\n                    <div className=\"form-check-inline\">\n                        <label className=\"form-check-lable\">\n                            Gender:\n                        </label>\n                    </div>\n\n                    <div className=\"form-check-inline\">\n                        <label htmlFor=\"maleGenderRadioButton\">Male</label>\n                        <input type=\"radio\" name=\"genderRadioButton\" id=\"maleGenderRadioButton\" onClick={() => handleGender(props.male)} />\n                    </div>\n                    <div className=\"form-check-inline\">\n                        <label htmlFor=\"femaleGenderRadioButton\">Female</label>\n                        <input type=\"radio\" name=\"genderRadioButton\" id=\"femaleGenderRadioButton\" defaultChecked={true} onClick={() => handleGender(props.female)} />\n                    </div>\n                </div>\n\n                {/* Age */}\n                <div className=\"form-group\">\n                    <table>\n                        <tbody>\n                            <tr>\n                                <td>\n                                    <label className=\"col-form-label\" htmlFor=\"inputAge\">Age</label>\n                                </td>\n                                <td>\n                                    <input type=\"text\" className=\"container-fluid ageTextEdit\" id=\"inputAge\" onChange={(e) => { handleAge(e) }} value={props.age} placeholder=\"Enter Age\" />\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n\n                {/* Anameia */}\n                <div>\n                    <div className=\"form-check-inline\">\n                        <label className=\"form-check-lable\">\n                            Anaemia\n                        </label>\n                    </div>\n                    <div className=\"form-check form-check-inline\">\n                        <label htmlFor=\"yesAnaemiaRadioButton\" className=\"form-check-inline\">Yes</label>\n                        <input type=\"radio\" name=\"anameiaRadioButton\" id=\"yesAnaemiaRadioButton\" onClick={() => handleAnaemia(props.yes)}></input>\n                    </div>\n                    <div className=\"form-check form-check-inline\">\n                        <label htmlFor=\"noAnaemiaRadioButton\" className=\"form-check-inline\">No</label>\n                        <input type=\"radio\" name=\"anameiaRadioButton\" defaultChecked={true} id=\"noAnaemiaRadioButton\" onClick={() => handleAnaemia(props.no)}></input>\n                    </div>\n                </div>\n\n                {/* Smoking */}\n                <div>\n                    <div className=\"form-check-inline\">\n                        <label className=\"form-check-label\">\n                            Smoking\n                        </label>\n                    </div>\n                    <div className=\"form-check form-check-inline\">\n                        <label htmlFor=\"yesSmokingRadioButton\" className=\"form-check-inline\">Yes</label>\n                        <input type=\"radio\" name=\"smokingRadioButton\" id=\"yesSmokingRadioButton\" onClick={() => handleSmoking(props.yes)}></input>\n                    </div>\n                    <div className=\"form-check form-check-inline\">\n                        <label htmlFor=\"noSmokingRadioButton\" className=\"form-check-inline\">No</label>\n                        <input type=\"radio\" name=\"smokingRadioButton\" id=\"noSmokingRadioButton\" defaultChecked={true} onClick={() => handleSmoking(props.no)}></input>\n                    </div>\n                </div>\n                {/* High Blooad Pressur */}\n                <div>\n                    <div className=\"form-check-inline\">\n                        <label className=\"form-check-label\">\n                            High Blood Pressure?\n                        </label>\n                    </div>\n                    <div className=\"form-check form-check-inline\">\n                        <label htmlFor=\"yesBpRadioButton\" className=\"form-check-inline\">Yes</label>\n                        <input type=\"radio\" name=\"BpRadioButton\" id=\"yesBpRadioButton\" onClick={() => handleBp(props.yes)}></input>\n                    </div>\n                    <div className=\"form-check form-check-inline\">\n                        <label htmlFor=\"noBpRadioButton\" className=\"form-check-inline\">No</label>\n                        <input type=\"radio\" name=\"BpRadioButton\" id=\"noBpRadioButton\" defaultChecked={true} onClick={() => handleBp(props.no)}></input>\n                    </div>\n                </div>\n\n                {/* Diabetes */}\n                <div>\n                    <div className=\"form-check-inline\">\n                        <label className=\"form-check-label\">\n                            Diabetes\n                        </label>\n                    </div>\n                    <div className=\"form-check form-check-inline\">\n                        <label htmlFor=\"yesDiabetesRadioButton\" className=\"form-check-inline\">Yes</label>\n                        <input type=\"radio\" name=\"DiabetesRadioButton\" id=\"yesDiabetesRadioButton\" onClick={() => handleDiabetes(props.yes)}></input>\n                    </div>\n                    <div className=\"form-check form-check-inline\">\n                        <label htmlFor=\"noDiabetesRadioButton\" className=\"form-check-inline\">No</label>\n                        <input type=\"radio\" name=\"DiabetesRadioButton\" id=\"noDiabetesRadioButton\" defaultChecked={true} onClick={() => handleDiabetes(props.yes)}></input>\n                    </div>\n                </div>\n\n                <div>\n                    <input type=\"text\" id=\"answer\" readOnly className=\"form-control-plaintext text-sm\" style={{ width: \"100%\",wordBreak:'break-word',wordWrap:'break-word'}} />\n                    <div className=\"clickButton my-1 btn btn-primary pull-right\" onClick={makePrediction} >Get Results</div>\n\n                </div>\n                <div className=\"font-weight-bold text-sm\">\n                    Disclaimer: The model purely based on this\n                    <a className=\"link-secondary\" style={{ textDecoration: \"none\" }} href=\"https://www.kaggle.com/andrewmvd/heart-failure-clinical-data\"> data</a>\n                </div>\n            </div>\n\n        </>\n    )\n}\n","import React from 'react'\n\nexport default function DismmisibleAlert(props) {\n    return (\n        <>\n            {props.state === true ?\n\n                (<div>\n                    <div class={`alert alert-${props.color} alert-dismissible fade show`} role=\"alert\">\n                    <strong>{props.message}</strong>\n                    <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\n                </div>\n                    \n                </div>\n                ) : \"\"}\n\n        </>\n    )\n}\n","import React from 'react'\nimport './Csss/Links.css'\n\n\n\nexport default function Links() {\n    let externalLinks = require(\"../externalLinks.json\");\n    return (\n        <div className=\"containerMainLinks container-fluid\" >\n            <h3>Reference Links</h3>\n            <details >\n                <summary>\n                    Diabetes\n                </summary>\n                <a className=\"link-success\"href={externalLinks.diabetes.Prevent}>How to prevent Diabetes</a><br />\n                <a className=\"link-success\"className=\"link-success\" href={externalLinks.diabetes.Deal}>How to deal with Diabetes</a>\n            </details>\n            <details>\n                <summary>\n                    Smoking\n                </summary>\n                <a className=\"link-success\"href={externalLinks.smoking.Stop}>How to stop smoking</a><br />\n                <a className=\"link-success\"href={externalLinks.smoking.Consequences}>Consequences of smoking</a>\n            </details>\n            <details>\n                <summary>\n                    Anaemia\n\n                </summary>\n                <a className=\"link-success\"href={externalLinks.anaemia.what}>What is anaemia</a><br />\n                <a className=\"link-success\"href={externalLinks.anaemia.symptoms}>Symptoms of anaemia</a><br />\n                <a className=\"link-success\"href={externalLinks.anaemia.preventions}>How to prevent anaemia</a>\n\n            </details>\n            <details>\n                <summary>\n                    Blood Pressure\n                </summary>\n                <a className=\"link-success\"href={externalLinks.bloodPressure.symptomsAndCauses}>Symptoms of High Blood Pressure</a><br />\n                <a className=\"link-success\"href={externalLinks.bloodPressure.preventions}>Prevent high blood pressure</a>\n            </details>\n\n\n        </div>\n    )\n}\n","import React from 'react'\nimport './Csss/Footer.css'\n\nexport default function Footer() {\n    return (\n        <div>\n            <div class=\"bg-dark text-light text-center p-4 containerMainFooter\">\n                © 2021 Copyright:\n                <a class=\"text-reset fw-bold\" href=\"https://tanmaydaga.github.io/Ai/\">Heart Failure Analytics</a>\n                <div>\n            <a class=\"nav-link\"  className = \"text-light\" href=\"https://github.com/TanmayDaga/Ai\">Get Code </a>\n            </div>\n            </div>\n            \n        </div>\n    )\n}\n","\nimport './App.css';\nimport NavBar from \"./components/NavBar.js\";\nimport PredictHeartFailure from './components/PredictHeartFailure';\nimport { useState } from \"react\";\nimport DismmisibleAlert from './components/DismmisibleAlert';\nimport Links from './components/Links';\nimport Footer from './components/Footer';\n\nlet no = \"NO\";\nlet yes = \"YES\";\nlet genderMale = \"MALE\"\nlet genderFemale = \"FEMALE\"\nlet colors = {\n  red:\"danger\",\n  yellow:\"alert\",\n  green:\"success\",\n}\n\n\nfunction App() {\n  const [diabetesState, setDiabetesState] = useState(no);\n  const [anaemiaState, setAnaemiaState] = useState(no);\n  const [genderState, setGenderState] = useState(null);\n  const [somkingState, setSomkingState] = useState(no);\n  const [bpState, setBpState] = useState(no);\n  const [ageState, setAgeState] = useState(45);\n  const [alertState, setAlertState] = useState(false);\n  const [alertMessage,setAlertMessage] = useState(\"Invalid age\");\n  const [alertColor,setAlertColor] = useState(colors.green);\n\n  return (\n      <>\n      \n      <NavBar/>\n      <DismmisibleAlert state = {alertState} message = {alertMessage} color = {alertColor}/>\n   \n      <PredictHeartFailure yes = {yes} no = {no} colors = {colors}\n                           male = {genderMale} female = {genderFemale}\n                           diabetes = {diabetesState} setDiabetes = {setDiabetesState}\n                           anaemia = {anaemiaState} setAnaemia = {setAnaemiaState} \n                           gender = {genderState} setGender = {setGenderState} \n                           smoking = {somkingState} setSmoking = {setSomkingState}\n                           bp = {bpState} setBp = {setBpState}\n                           age = {ageState} setAge = {setAgeState}\n                           alertState = {alertState} alertMessage = {alertMessage}\n                           setAlertState = {setAlertState} setAlertMessage = {setAlertMessage} setAlertColor = {setAlertColor}\n                           />\n      <Links/>\n      <footer>\n        <Footer/>\n      </footer>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}